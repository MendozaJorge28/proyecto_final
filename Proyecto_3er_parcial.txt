import tkinter as tk
from tkinter import messagebox, ttk
from datetime import datetime

class Persona:
    def __init__(self, id_persona, nombre, edad, sexo, cedula, domicilio, telefono, correo, inicio):
        self.id_persona = id_persona
        self.nombre = nombre
        self.edad = edad
        self.sexo = sexo
        self.cedula = cedula
        self.domicilio = domicilio
        self.telefono = telefono
        self.correo = correo
        self.inicio = inicio
        self.turno = None
        self.area = None
        self.vacaciones = []
        self.asistencias = []

personas_registradas = []
contador_id = 1

def reinicio():
    for widget in area_dinamica.winfo_children():
        widget.destroy()

def registrar_trabajadores():
    reinicio()
    tk.Label(area_dinamica, text="Registrar trabajador").pack(pady=10)

    campos = ["Nombre", "Edad", "Cédula", "Domicilio", "Teléfono", "Correo", "Fecha de inicio"]
    entradas = {}

    for campo in campos:
        tk.Label(area_dinamica, text=campo).pack()
        entrada = tk.Entry(area_dinamica)
        entrada.pack(pady=2)
        entradas[campo] = entrada

    tk.Label(area_dinamica, text="Sexo").pack()
    sexo_elegido = tk.StringVar(value="Masculino")
    tk.Radiobutton(area_dinamica, text="Masculino", variable=sexo_elegido, value="Masculino").pack()
    tk.Radiobutton(area_dinamica, text="Femenino", variable=sexo_elegido, value="Femenino").pack()

    def guardar_persona():
        global contador_id

        try:
            nombre = entradas["Nombre"].get()
            edad = int(entradas["Edad"].get())
            sexo = sexo_elegido.get()
            cedula = int(entradas["Cédula"].get())
            domicilio = entradas["Domicilio"].get()
            telefono = int(entradas["Teléfono"].get())
            correo = entradas["Correo"].get()
            inicio = datetime.strptime(entradas["Fecha de inicio"].get(), "%Y-%m-%d").date()

            persona = Persona(contador_id, nombre, edad, sexo, cedula, domicilio, telefono, correo, inicio)
            personas_registradas.append(persona)

            messagebox.showinfo("Registro", f"Registro exitoso.\nTu ID es: {contador_id}")
            contador_id += 1

        except Exception as e:
            messagebox.showerror("Error", f"Datos inválidos. Revisa los campos.\n{e}")

    tk.Button(area_dinamica, text="Registrar", command=guardar_persona).pack(pady=10)

def elegir_puesto():
    reinicio()
    tk.Label(area_dinamica, text="Asignar Turno").pack(pady=10)

    tk.Label(area_dinamica, text="ID DEL TRABAJADOR:").pack()
    id_entry = tk.Entry(area_dinamica)
    id_entry.pack(pady=5)

    tk.Label(area_dinamica, text="Horario:").pack()
    opcion_elegida = tk.StringVar(value="Matutino")
    tk.Radiobutton(area_dinamica, text="07:00am-03:00pm", variable=opcion_elegida, value="Matutino").pack()
    tk.Radiobutton(area_dinamica, text="03:00pm-11:00pm", variable=opcion_elegida, value="Vespertino").pack()
    tk.Radiobutton(area_dinamica, text="11:00pm-07:00am", variable=opcion_elegida, value="Nocturno").pack()

    tk.Label(area_dinamica, text="Área de trabajo:").pack()
    combo = ttk.Combobox(area_dinamica, values=["Doctor", "Conserje", "Cirujano", "Enfermero"])
    combo.pack()

    def guardar_datos():
        try:
            id_trabajador = int(id_entry.get())
            turno = opcion_elegida.get()
            area = combo.get()

            persona = next((p for p in personas_registradas if p.id_persona == id_trabajador), None)
            if persona:
                persona.turno = turno
                persona.area = area
                messagebox.showinfo("Asignación", f"Asignación exitosa para ID {id_trabajador}")
            else:
                messagebox.showerror("Error", f"No se encontró trabajador con ID {id_trabajador}")

        except ValueError:
            messagebox.showerror("Error", "ID inválido. Debe ser un número.")

    tk.Button(area_dinamica, text="Guardar", command=guardar_datos).pack(pady=10)

def ingresar_asistencia():
        reinicio()
        tk.Label(area_dinamica, text="Asistencia").pack()

        tk.Label(area_dinamica, text="ID del trabajador").pack()
        id_entry = tk.Entry(area_dinamica)
        id_entry.pack()

        def registrar_entrada():
            try:
                id_persona = int(id_entry.get())
                persona = next((p for p in personas_registradas if p.id_persona == id_persona), None)
                if persona:
                    persona.asistencias.append(("Entrada", datetime.now()))
                    messagebox.showinfo("Éxito", "Entrada registrada")
                else:
                    messagebox.showerror("Error", "ID no encontrado")
            except:
                messagebox.showerror("Error", "ID inválido")

        def registrar_salida():
            try:
                id_persona = int(id_entry.get())
                persona = next((p for p in personas_registradas if p.id_persona == id_persona), None)
                if persona:
                    persona.asistencias.append(("Salida", datetime.now()))
                    messagebox.showinfo("Éxito", "Salida registrada")
                else:
                    messagebox.showerror("Error", "ID no encontrado")
            except:
                messagebox.showerror("Error", "ID inválido")

        tk.Button(area_dinamica, text="Hora de Entrada", command=registrar_entrada).pack()
        tk.Button(area_dinamica, text="Hora de Salida", command=registrar_salida).pack()

def interfaz_cuatro():
    reinicio()

def registrados():
    reinicio()
    tk.Label(area_dinamica, text="Trabajadores Registrados").pack(pady=10)
    for persona in personas_registradas:
        info = (
            f"ID: {persona.id_persona}, Nombre: {persona.nombre}, Edad: {persona.edad}, Sexo: {persona.sexo}, "
            f"Cédula: {persona.cedula}, Domicilio: {persona.domicilio}, Teléfono: {persona.telefono}, "
            f"Correo: {persona.correo}, Inicio de trabajo: {persona.inicio}, Turno: {persona.turno or "ERROR"}, "
            f"Área de trabajo: {persona.area or 'ERROR'}"
        )
        tk.Label(area_dinamica, text=info, anchor="w", justify="left").pack(fill="x", padx=10)

ventana_principal = tk.Tk()
ventana_principal.title("Interfaz para prácticas")
ventana_principal.geometry("1000x800")
ventana_principal.config(bg="lightblue")

menu_lateral = tk.Frame(ventana_principal, bg="lightblue", width=120)
menu_lateral.pack(side="left", fill="y")

area_dinamica = tk.Frame(ventana_principal, bg="white")
area_dinamica.pack(side="right", expand=True, fill="both")

tk.Button(menu_lateral, text="Registro", command=registrar_trabajadores, width=15).pack(pady=10)
tk.Button(menu_lateral, text="Turno y Area", command=elegir_puesto, width=15).pack(pady=10)
tk.Button(menu_lateral, text="Asistencia", command=ingresar_asistencia, width=15).pack(pady=10)
tk.Button(menu_lateral, text="Vacaciones", command=interfaz_cuatro, width=15).pack(pady=10)
tk.Button(menu_lateral, text="Trabajadores", command=registrados, width=15).pack(pady=10)
tk.Button(menu_lateral, text="Salir", command=ventana_principal.destroy, width=15).pack(pady=30)

registrar_trabajadores()

ventana_principal.mainloop()
