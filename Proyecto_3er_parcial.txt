import tkinter as tk
from tkinter import messagebox, ttk
from datetime import datetime

class Asistencia:
    def __init__(self, tipo, timestamp, retardo=False):
        self.tipo = tipo
        self.timestamp = timestamp
        self.retardo = retardo

class Vacacion:
    def __init__(self, inicio, fin):
        self.inicio = inicio
        self.fin = fin

class Asignacion:
    def __init__(self, turno, area):
        self.turno = turno
        self.area = area

class Persona:
    def __init__(self, id_persona, nombre, edad, sexo, cedula, domicilio, telefono, correo, inicio):
        self.id_persona = id_persona
        self.nombre = nombre
        self.edad = edad
        self.sexo = sexo
        self.cedula = cedula
        self.domicilio = domicilio
        self.telefono = telefono
        self.correo = correo
        self.inicio = inicio
        self.asignacion = None
        self.vacaciones = []
        self.asistencias = []

personas_registradas = []
contador_id = 1

def reinicio():
    for widget in area_dinamica.winfo_children():
        widget.destroy()

def buscar_persona(id_):
    return next((p for p in personas_registradas if p.id_persona == id_), None)

def registrar_trabajadores():
    reinicio()
    tk.Label(area_dinamica, text="Registrar trabajador").pack(pady=10)

    campos = ["Nombre", "Edad", "Cédula", "Domicilio", "Teléfono", "Correo", "Fecha de inicio"]
    entradas = {}

    for campo in campos:
        tk.Label(area_dinamica, text=campo).pack()
        entrada = tk.Entry(area_dinamica)
        entrada.pack(pady=2)
        entradas[campo] = entrada

    tk.Label(area_dinamica, text="Sexo").pack()
    sexo_elegido = tk.StringVar(value="Masculino")
    tk.Radiobutton(area_dinamica, text="Masculino", variable=sexo_elegido, value="Masculino").pack()
    tk.Radiobutton(area_dinamica, text="Femenino", variable=sexo_elegido, value="Femenino").pack()

    def guardar_persona():
        global contador_id
        try:
            if not all(entrada.get() for entrada in entradas.values()):
                messagebox.showerror("Error", "Todos los campos deben estar llenos.")
                return

            nombre = entradas["Nombre"].get()
            edad = int(entradas["Edad"].get())
            sexo = sexo_elegido.get()
            cedula = int(entradas["Cédula"].get())
            domicilio = entradas["Domicilio"].get()
            telefono = int(entradas["Teléfono"].get())
            correo = entradas["Correo"].get()
            inicio = datetime.strptime(entradas["Fecha de inicio"].get(), "%Y-%m-%d").date()

            if any(p.correo == correo or p.cedula == cedula for p in personas_registradas):
                messagebox.showerror("Error", "Ya existe un trabajador con ese correo o cédula.")
                return

            persona = Persona(contador_id, nombre, edad, sexo, cedula, domicilio, telefono, correo, inicio)
            personas_registradas.append(persona)

            messagebox.showinfo("Registro", f"Registro exitoso.\nTu ID es: {contador_id}")
            contador_id += 1

        except Exception as e:
            messagebox.showerror("Error", f"Datos inválidos. Revisa los campos.\n{e}")

    tk.Button(area_dinamica, text="Registrar", command=guardar_persona).pack(pady=10)

def elegir_puesto():
    reinicio()
    tk.Label(area_dinamica, text="Asignar Turno y Área").pack(pady=10)

    tk.Label(area_dinamica, text="ID DEL TRABAJADOR:").pack()
    id_entry = tk.Entry(area_dinamica)
    id_entry.pack(pady=5)

    tk.Label(area_dinamica, text="Horario:").pack()
    opcion_elegida = tk.StringVar(value="Matutino")
    horarios = [("07:00am-03:00pm", "Matutino"), ("03:00pm-11:00pm", "Vespertino"), ("11:00pm-07:00am", "Nocturno")]
    for texto, valor in horarios:
        tk.Radiobutton(area_dinamica, text=texto, variable=opcion_elegida, value=valor).pack()

    tk.Label(area_dinamica, text="Área de trabajo:").pack()
    combo = ttk.Combobox(area_dinamica, values=["Doctor", "Conserje", "Cirujano", "Enfermero"])
    combo.pack()

    def guardar_datos():
        try:
            id_trabajador = int(id_entry.get())
            persona = buscar_persona(id_trabajador)
            if persona:
                turno = opcion_elegida.get()
                area = combo.get()
                if not area:
                    messagebox.showerror("Error", "Selecciona un área.")
                    return
                persona.asignacion = Asignacion(turno, area)
                messagebox.showinfo("Asignación", f"Turno y área asignados al trabajador ID {id_trabajador}")
            else:
                messagebox.showerror("Error", "Trabajador no encontrado")
        except:
            messagebox.showerror("Error", "ID inválido")

    tk.Button(area_dinamica, text="Guardar", command=guardar_datos).pack(pady=10)

def ingresar_asistencia():
    reinicio()
    tk.Label(area_dinamica, text="Asistencia").pack()

    tk.Label(area_dinamica, text="ID del trabajador").pack()
    id_entry = tk.Entry(area_dinamica)
    id_entry.pack()

    def registrar(tipo):
        try:
            id_persona = int(id_entry.get())
            persona = buscar_persona(id_persona)
            if not persona:
                messagebox.showerror("Error", "ID no encontrado")
                return

            hoy = datetime.now().date()

            for vacacion in persona.vacaciones:
                if vacacion.inicio <= hoy <= vacacion.fin:
                    messagebox.showerror("Error", "El trabajador está de vacaciones hoy.")
                    return

            for asistencia in persona.asistencias:
                if asistencia.timestamp.date() == hoy and asistencia.tipo == tipo:
                    messagebox.showerror("Error", f"{tipo} ya fue registrada hoy.")
                    return

            if tipo == "Entrada":
                if not persona.asignacion:
                    messagebox.showerror("Error", "El trabajador no tiene asignado turno.")
                    return

                hora_actual = datetime.now().time()
                retardo = False
                limites = {
                    "Matutino": datetime.strptime("07:15", "%H:%M").time(),
                    "Vespertino": datetime.strptime("15:15", "%H:%M").time(),
                    "Nocturno": datetime.strptime("23:15", "%H:%M").time(),
                }
                turno = persona.asignacion.turno
                hora_limite = limites.get(turno)

                if hora_actual > hora_limite:
                    retardo = True

                persona.asistencias.append(Asistencia(tipo, datetime.now(), retardo))
            else:
                persona.asistencias.append(Asistencia(tipo, datetime.now()))

            messagebox.showinfo("Éxito", f"{tipo} registrada correctamente.")

        except:
            messagebox.showerror("Error", "ID inválido")

    tk.Button(area_dinamica, text="Hora de Entrada", command=lambda: registrar("Entrada")).pack()
    tk.Button(area_dinamica, text="Hora de Salida", command=lambda: registrar("Salida")).pack()

def ingresar_vacaciones():
    reinicio()
    tk.Label(area_dinamica, text="Registrar Vacaciones").pack(pady=10)

    tk.Label(area_dinamica, text="ID del trabajador").pack()
    id_entry = tk.Entry(area_dinamica)
    id_entry.pack()

    tk.Label(area_dinamica, text="Fecha inicio (YYYY-MM-DD)").pack()
    entrada_inicio = tk.Entry(area_dinamica)
    entrada_inicio.pack()

    tk.Label(area_dinamica, text="Fecha fin (YYYY-MM-DD)").pack()
    entrada_fin = tk.Entry(area_dinamica)
    entrada_fin.pack()

    def registrar_vacaciones():
        try:
            id_trabajador = int(id_entry.get())
            persona = buscar_persona(id_trabajador)
            if persona:
                inicio = datetime.strptime(entrada_inicio.get(), "%Y-%m-%d").date()
                fin = datetime.strptime(entrada_fin.get(), "%Y-%m-%d").date()
                if fin < inicio:
                    messagebox.showerror("Error", "La fecha final no puede ser anterior a la de inicio.")
                    return
                persona.vacaciones.append(Vacacion(inicio, fin))
                messagebox.showinfo("Éxito", "Vacaciones registradas")
            else:
                messagebox.showerror("Error", "ID no encontrado")
        except Exception as e:
            messagebox.showerror("Error", f"Datos inválidos: {e}")

    tk.Button(area_dinamica, text="Registrar Vacaciones", command=registrar_vacaciones).pack(pady=10)

def horarios_registrados():
    reinicio()
    tk.Label(area_dinamica, text="Historial de Asistencias y Vacaciones").pack()

    for persona in personas_registradas:
        tk.Label(area_dinamica, text=f"ID: {persona.id_persona} - {persona.nombre}").pack(anchor="w", padx=10)

        if persona.asistencias:
            tk.Label(area_dinamica, text="Asistencias:").pack(anchor="w", padx=10)
            for a in persona.asistencias:
                texto = f"{a.tipo} - {a.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
                if a.tipo == "Entrada" and a.retardo:
                    texto += " (RETARDO)"
                tk.Label(area_dinamica, text=texto).pack(anchor="w", padx=10)
        else:
            tk.Label(area_dinamica, text="Sin asistencias").pack(anchor="w", padx=10)

        if persona.vacaciones:
            tk.Label(area_dinamica, text="Vacaciones:").pack(anchor="w", padx=10)
            for v in persona.vacaciones:
                tk.Label(area_dinamica, text=f"   Del {v.inicio} al {v.fin}").pack(anchor="w", padx=10)
        else:
            tk.Label(area_dinamica, text="  Sin vacaciones").pack(anchor="w", padx=10)

        tk.Label(area_dinamica, text="").pack()

def registrados():
    reinicio()
    tk.Label(area_dinamica, text="Trabajadores Registrados").pack(pady=10)
    for persona in personas_registradas:
        turno = persona.asignacion.turno if persona.asignacion else "N/A"
        area = persona.asignacion.area if persona.asignacion else "N/A"
        info = (
            f"ID: {persona.id_persona}, Nombre: {persona.nombre}, Edad: {persona.edad}, Sexo: {persona.sexo}, "
            f"Cédula: {persona.cedula}, Domicilio: {persona.domicilio}, Teléfono: {persona.telefono}, "
            f"Correo: {persona.correo}, Inicio de trabajo: {persona.inicio}, Turno: {turno}, Área: {area}"
        )
        tk.Label(area_dinamica, text=info, anchor="w", justify="left").pack(fill="x", padx=10)

ventana_principal = tk.Tk()
ventana_principal.title("Interfaz para prácticas")
ventana_principal.geometry("1000x800")
ventana_principal.config(bg="lightblue")

menu_lateral = tk.Frame(ventana_principal, bg="lightblue", width=120)
menu_lateral.pack(side="left", fill="y")

area_dinamica = tk.Frame(ventana_principal, bg="white")
area_dinamica.pack(side="right", expand=True, fill="both")

tk.Button(menu_lateral, text="Registro", command=registrar_trabajadores, width=15).pack(pady=10)
tk.Button(menu_lateral, text="Turno y Área", command=elegir_puesto, width=15).pack(pady=10)
tk.Button(menu_lateral, text="Asistencia", command=ingresar_asistencia, width=15).pack(pady=10)
tk.Button(menu_lateral, text="Vacaciones", command=ingresar_vacaciones, width=15).pack(pady=10)
tk.Button(menu_lateral, text="Trabajadores", command=registrados, width=15).pack(pady=10)
tk.Button(menu_lateral, text="A y I", command=horarios_registrados, width=15).pack(pady=10)
tk.Button(menu_lateral, text="Salir", command=ventana_principal.destroy, width=15).pack(pady=30)

registrar_trabajadores()
ventana_principal.mainloop()


registrar_trabajadores()

ventana_principal.mainloop()
